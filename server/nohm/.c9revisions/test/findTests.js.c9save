{"ts":1354637649958,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var async = require('async');\nvar nohm = require(__dirname + '/../lib/nohm').Nohm;\nvar h = require(__dirname + '/helper.js');\nvar args = require(__dirname + '/testArgs.js');\nvar redis = args.redis;\n\nvar UserFindMockup = nohm.model('UserFindMockup', {\n  properties: {\n    name: {\n      type: 'string',\n      defaultValue: 'testName',\n      index: true,\n      validations: [\n        'notEmpty'\n        ]\n    },\n    email: {\n      type: 'string',\n      defaultValue: 'testMail@test.de',\n      unique: true\n    },\n    gender: {\n      type: 'string'\n    },\n    json: {\n      type: 'json',\n      defaultValue: '{}'\n    },\n    number: {\n      type: 'integer',\n      defaultValue: 1,\n      index: true\n    },\n    number2: {\n      type: 'integer',\n      defaultValue: 200,\n      index: true\n    },\n    bool: {\n      type: 'bool',\n      defaultValue: false\n    }\n  },\n  idGenerator: 'increment'\n});\n\nvar UserFindNoIncrementMockup = nohm.model('UserFindNoIncrementMockup', {\n  properties: {\n    name: {\n      type: 'string',\n      defaultValue: 'testName',\n      index: true,\n      validations: [\n        'notEmpty'\n        ]\n    },\n    number: {\n      type: 'integer',\n      defaultValue: 1,\n      index: true\n    }\n  }\n});\n\nnohm.model('UniqueIntegerFind', {\n  properties: {\n    unique: {\n      type: 'integer',\n      unique: true\n    }\n  }\n});\n\nvar errLogger = function(err) {\n  if (err) {\n    console.dir(err);\n  }\n};\n\nvar createUsers = function(props, modelName, callback) {\n  if (typeof(modelName) === 'function') {\n    callback = modelName;\n    modelName = 'UserFindMockup';\n  }\n  var makeSeries = function(prop) {\n    return function(next) {\n      var user = nohm.factory(modelName);\n      user.p(prop);\n      user.save(function (err) {\n        next(err, user);\n      });\n    };\n  };\n\n  var series = props.map(function(prop) {\n    return makeSeries(prop);\n  });\n\n  async.series(series, function(err, users) {\n    var ids = users.map(function (user) {\n      return user.id;\n    });\n    callback(users, ids);\n  });\n};\n\nexports.find = {\n  \n  setUp: function(next) {\n    if (!nohm.client) {\n      nohm.setClient(redis);\n    }\n    var t = this;\n    h.cleanUp(redis, args.prefix, function() {\n      createUsers([{\n        name: 'numericindextest',\n        email: 'numericindextest@hurgel.de',\n        gender: 'male',\n        number: 3\n      }, {\n        name: 'numericindextest',\n        email: 'numericindextest2@hurgel.de',\n        gender: 'male',\n        number: 4,\n        number2: 33\n      }, {\n        name: 'numericindextest',\n        email: 'numericindextest3@hurgel.de',\n        gender: 'female',\n        number: 4,\n        number2: 1\n      }, {\n        name: 'uniquefind',\n        email: 'uniquefind@hurgel.de'\n      }, {\n        name: 'indextest',\n        email: 'indextest@hurgel.de'\n      }, {\n        name: 'indextest',\n        email: 'indextest2@hurgel.de'\n      }, {\n        name: 'a_sort_first',\n        email: 'a_sort_first@hurgel.de',\n        number: 1\n      }, {\n        name: 'z_sort_last',\n        email: 'z_sort_last@hurgel.de',\n        number: 100000\n      }], function(users, ids) {\n        t.users = users;\n        t.userIds = ids;\n        next();\n      });\n    });\n  },\n  tearDown: function(next) {\n    h.cleanUp(redis, args.prefix, next);\n  },\n\n\n  loadInvalid: function(t) {\n    var user = new UserFindMockup();\n    t.expect(1);\n\n    h.cleanUp(redis, args.prefix, function () {\n      user.load(1, function(err) {\n        t.equals(err, 'not found', 'Load() did not return \"not found\" for id 1 even though there should not be a user yet.');\n        t.done();\n      });\n    });\n  },\n\n\n  load: function(t) {\n    var user = new UserFindMockup(),\n        findUser = new UserFindMockup();\n    t.expect(5);\n\n    user.p({\n      name: 'hurgelwurz',\n      email: 'hurgelwurz@hurgel.de',\n      json: {\n        test: 1\n      },\n      bool: 'true'\n    });\n\n    user.save(function(err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      findUser.load(user.id, function(err) {\n        if (err) {\n          console.dir(err);\n          t.done();\n        }\n        t.equals(user.p('name'), findUser.p('name'), 'The loaded version of the name was not the same as a set one.');\n        t.equals(user.p('email'), findUser.p('email'), 'The loaded version of the email was not the same as a set one.');\n        t.equals(findUser.p('json').test, 1, 'The loaded version of the json was not the same as the set one.');\n        t.equals(user.id, findUser.id, 'The loaded version of the email was not the same as a set one.');\n        t.equals(findUser.p('bool'), true, 'The loaded version of the boolean was not the same as a set one.');\n        t.done();\n      });\n    });\n  },\n\n\n  findAndLoad: function (t) {\n    var user = new UserFindMockup();\n\n    user.p({\n      name: 'hurgelwurz',\n      email: 'hurgelwurz@hurgel.de',\n    });\n\n    user.save(function(err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      UserFindMockup.findAndLoad({name: \"hurgelwurz\"}, function(err, users) {\n        if (err) {\n          console.dir(err);\n          t.done();\n        }\n\n        t.equals(users.length, 1, 'The loaded number of users equals 1');\n        t.equals(user.p('name'), users[0].p('name'), 'The loaded version of the name was not the same as a set one.');\n        t.equals(user.p('email'), users[0].p('email'), 'The loaded version of the email was not the same as a set one.');\n        t.equals(user.id, users[0].id, 'The loaded version of the email was not the same as a set one.');\n        t.done();\n      });\n    });\n  },\n\n\n  findAll: function(t) {\n    var self = this;\n    var findUser = new UserFindMockup();\n    t.expect(1);\n\n    findUser.find(function(err, ids) {\n      ids.sort(); // usually redis returns them first-in-first-out, but not always\n      t.same(self.userIds, ids, 'find() did not return all users when not given any search parameters.');\n      t.done();\n    });\n  },\n\n  exists: function(t) {\n    var existsUser = new UserFindMockup();\n    t.expect(2);\n\n\n    existsUser.exists(1, function(exists) {\n      t.equals(exists, true, 'Exists() did not return true for id 1.');\n\n      existsUser.exists(9999999, function(exists) {\n        t.equals(exists, false, 'Exists() did not return false for id 9999999.');\n        t.done();\n      });\n    });\n  },\n\n/* I don't know how to do this right now.\nloadArray: function (t) {\n  var findUser = new UserFindMockup();\n  t.expect(2);\n  \n  findUser.load(all, function (err, users) {\n    errLogger(err);\n    t.ok(Array.isArray(users), 'load()ing an array of ids did not return an array');\n    t.same(all.length, users.length, 'load()ing an array of ids did not return an array with the coorect length');\n  });\n},*/\n\n  findByInvalidSearch: function(t) {\n    var findUser = new UserFindMockup();\n    t.expect(1);\n\n    console.log('There should be an error in the next line');\n    findUser.find({\n      gender: 'male'\n    }, function(err, ids) {\n      t.same(0, ids.length, 'Searching for a nonexistant index did not return an empty array.');\n      t.done();\n    });\n  },\n\n  findByUnique: function(t) {\n    var findUser = new UserFindMockup();\n    var userUnique = this.users.filter(function (user) {\n      return user.p('name') ==='uniquefind';\n    })[0];\n    t.expect(1);\n\n    findUser.find({\n      email: userUnique.p('email')\n    }, function(err, ids) {\n      if (err) {\n        console.dir(err);\n      }\n      t.same(ids, [userUnique.id], 'The found id did not match the id of the saved object.');\n      t.done();\n    });\n  },\n\n  findByUniqueOtherCase: function(t) {\n    var findUser = new UserFindMockup();\n    var userUnique = this.users.filter(function (user) {\n      return user.p('name') ==='uniquefind';\n    })[0];\n    t.expect(1);\n\n    findUser.find({\n      email: userUnique.p('email').toUpperCase()\n    }, function(err, ids) {\n      if (err) {\n        console.dir(err);\n      }\n      t.same(ids, [userUnique.id], 'The found id did not match the id of the saved object.');\n      t.done();\n    });\n  },\n\n  findByUniqueInvalidSearch: function(t) {\n    var findUser = new UserFindMockup();\n    t.expect(1);\n\n    console.log('There should be an error in the next line');\n    findUser.find({\n      email: {}\n    }, function(err) {\n      t.same(0, err.indexOf('Invalid search parameters'), 'The found id did not match the id of the saved object.');\n      t.done();\n    });\n  },\n  \n  findByIntegerUnique: function(t) {\n    var saveObj = nohm.factory('UniqueIntegerFind');\n    var findObj = nohm.factory('UniqueIntegerFind');\n    t.expect(3);\n    \n    saveObj.p('unique', 123);\n    saveObj.save(function (err) {\n      t.ok(!err, 'Unexpected saving error');\n\n      findObj.find({\n        unique: saveObj.p('unique')\n      }, function(err, ids) {\n        t.ok(!err, 'Unexpected finding error');\n        t.same(ids, [saveObj.id], 'The found id did not match the id of the saved object.');\n        t.done();\n      });\n    });\n  },\n\n  findByStringIndex: function(t) {\n    var findUser = new UserFindMockup();\n    var users = this.users.filter(function (user) {\n      return user.p('name') ==='indextest';\n    });\n    t.expect(1);\n\n    findUser.find({\n      name: 'indextest'\n    }, function(err, ids) {\n      if (err) {\n        console.dir(err);\n      }\n      t.same(ids, [users[0].id, users[1].id], 'The found id did not match the id of the saved object.');\n      t.done();\n    });\n  },\n\n  findByNumericIndex: function(t) {\n    var findUser = new UserFindMockup();\n    var users = this.users.filter(function (user) {\n      return user.p('number') > 2 && user.p('number2') < 100;\n    });\n    t.expect(1);\n\n    findUser.find({\n      number: {\n        min: 2\n      },\n      number2: {\n        max: 100,\n        limit: 2\n      }\n    }, function(err, ids) {\n      errLogger(err);\n      t.same(ids.sort(), [users[0].id, users[1].id].sort(), 'The found id did not match the id of the saved object.');\n      t.done();\n    });\n  },\n\n  findByMixedIndex: function(t) {\n    var findUser = new UserFindMockup();\n    t.expect(1);\n\n    createUsers([{\n      name: 'mixedindextest',\n      email: 'mixedindextest@hurgel.de',\n      number: 3,\n      number2: 33\n    }, {\n      name: 'mixedindextest',\n      email: 'mixedindextest2@hurgel.de',\n      number: 4,\n      number2: 33\n    }, {\n      name: 'mixedindextestNOT',\n      email: 'mixedindextest3@hurgel.de',\n      number: 4,\n      number2: 1\n    }, {\n      name: 'mixedindextest',\n      email: 'mixedindextest4@hurgel.de',\n      number: 1,\n      number2: 33\n    }], function (users, inserted_ids) {\n\n      findUser.find({\n        number: {\n          min: 2\n        },\n        number2: {\n          max: 100\n        },\n        name: 'mixedindextest'\n      }, function(err, ids) {\n        if (err) {\n          console.dir(err);\n        }\n        t.same(ids.sort(), [users[0].id, users[1].id].sort(), 'The found id did not match the id of the saved object.');\n        t.done();\n      });\n    });\n  },\n\n  findSameNumericTwice: function(t) {\n    var self = this;\n    var findUser = new UserFindMockup();\n    t.expect(2);\n\n\n    createUsers([{\n      name: 'SameNumericTwice',\n      email: 'SameNumericTwice@hurgel.de',\n      number: 3000\n    }, {\n      name: 'SameNumericTwice2',\n      email: 'SameNumericTwice2@hurgel.de',\n      number: 3000\n    }], function (users, userIds) {\n      findUser.find({\n        number: {\n          min: 3000\n        }\n      }, function(err, ids) {\n        if (err) {\n          console.dir(err);\n        }\n        userIds.push(self.userIds[self.userIds.length-1]);\n        t.same(userIds.length, 3, 'Didn\\'t create 2 users, instead: '+userIds.length);\n        t.same(ids.sort(), userIds.sort(), 'The found id did not match the id of the saved objects.');\n        t.done();\n      });\n    });\n  },\n\n  findByMixedIndexMissing: function(t) {\n    var findUser = new UserFindMockup();\n    t.expect(1);\n    \n    createUsers([{\n      name: 'mixedindextestMissing',\n      email: 'mixedindextestMissing@hurgel.de',\n      number: 4\n    }, {\n      name: 'mixedindextestMissing2',\n      email: 'mixedindextestMissing2@hurgel.de',\n      number: 4\n    }], function () {\n      findUser.find({\n        number: {\n          min: 2\n        },\n        name: 'mixedindextASDASDestMISSING'\n      }, function(err, ids) {\n        if (err) {\n          console.dir(err);\n        }\n        t.same(ids, [], 'Ids were found even though the name should not be findable.');\n        t.done();\n      });\n    });\n  },\n\n\n  findNumericWithoutLimit: function(t) {\n    var findUser = new UserFindMockup(),\n        usersLooped = 0,\n        loopUserCreation = function() {\n        usersLooped++;\n        if (usersLooped === 55) {\n          findUser.find({\n            number: {\n              min: 1,\n              limit: 0\n            }\n          }, function(err, ids) {\n            errLogger(err);\n            t.ok(ids.length > 54, 'The limit: 0 option did not return more than 50 ids.');\n            t.done();\n          });\n        }\n        };\n    t.expect(1);\n\n    for (var i = 0, len = 55; i < len; i++) {\n      var user = new UserFindMockup();\n      user.p({\n        name: 'findNumericWithoutLimit' + i,\n        email: 'findNumericWithoutLimit' + i + '@hurgel.de',\n        number: i\n      });\n\n      user.save(loopUserCreation);\n    }\n  },\n\n  findExactNumeric: function(t) {\n    var user = new UserFindMockup(),\n        findUser = new UserFindMockup(),\n        num = 999876543;\n    t.expect(2);\n\n    user.p({\n      name: 'findExactNumeric',\n      email: 'findExactNumeric@hurgel.de',\n      number: num\n    });\n    user.save(function(err) {\n      if (err) {\n        console.dir(err);\n      }\n      findUser.find({\n        number: num\n      }, function(err, ids) {\n        t.same(ids, [user.id], 'Did not find an exact number match');\n        findUser.find({\n          number: (num - 1)\n        }, function(err, ids) {\n          t.same(ids, [], 'Searching for a nonexistant number did not return an empty array.');\n          t.done();\n        });\n      });\n    });\n  },\n\n  loadReturnsProps: function(t) {\n    var user = new UserFindMockup(),\n        findUser = new UserFindMockup();\n    t.expect(1);\n\n    user.p({\n      name: 'loadReturnsProps',\n      email: 'loadReturnsProps@hurgel.de',\n      json: {\n        test: 1\n      }\n    });\n\n    user.save(function(err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      findUser.load(user.id, function(err, props) {\n        if (err) {\n          console.dir(err);\n          t.done();\n        }\n        var testProps = user.allProperties();\n        delete testProps.id;\n        t.same(props, testProps, 'The loaded properties are not the same as allProperties() (without id).');\n        t.done();\n      });\n    });\n  },\n\n  shortForms: function(t) {\n    t.expect(11);\n    var shortFormMockup = nohm.model('shortFormMockup', {\n      properties: {\n        name: {\n          type: 'string',\n          defaultValue: 'testName',\n          index: true,\n          validations: [\n            'notEmpty'\n            ]\n        }\n      },\n      idGenerator: 'increment'\n    });\n\n    shortFormMockup.save(function(err) {\n      var id = this.id;\n      t.ok(!err, 'There was an error while saving');\n      t.ok(this instanceof shortFormMockup, '´this´ was not set to an instance of UserFindMockup');\n      t.ok(id > 0, 'The id was not set properly');\n      this.p('name', 'shortForm');\n      this.save(function() {\n        this.p('name', 'asdasd'); // make sure our comparisons in load aren't bogus\n        shortFormMockup.load(id, function(err, props) {\n          t.ok(!err, 'There was an error while loading.');\n          t.ok(props.hasOwnProperty('name') && props.name === 'shortForm', 'The props argument was not properly passed in load.');\n          t.same(this.p('name'), 'shortForm', 'The `this` instance has some property issues.');\n          shortFormMockup.find({\n            name: 'shortForm'\n          }, function(err, ids) {\n            t.ok(!err, 'There was an error while finding');\n            t.same(ids, [id], 'The found ids do not match [id]');\n            shortFormMockup.remove(id, function(err) {\n              t.ok(!err, 'There was an error while removing');\n              shortFormMockup.find({\n                name: 'shortForm'\n              }, function(err, ids) {\n                t.ok(!err, 'There was en error while finding the second time');\n                t.same(ids, [], 'Remove did not remove the correct instance. Uh-Oh.... :D ');\n                t.done();\n              });\n            });\n          });\n        });\n      });\n    });\n  },\n\n  uuidLoadFind: function(t) {\n    t.expect(6);\n    var uuidMockup = nohm.model('uuidMockup', {\n      properties: {\n        name: {\n          type: 'string',\n          defaultValue: 'testName',\n          index: true,\n          validations: [\n            'notEmpty'\n            ]\n        }\n      }\n    });\n\n    var test = new uuidMockup();\n    test.p('name', 'uuid');\n\n    var test2 = new uuidMockup();\n    test2.p('name', 'uuid2');\n\n    test.save(function() {\n      t.ok(test.id.length > 0, 'There was no proper id generated');\n      test2.save(function() {\n        t.ok(test.id !== test2.id, 'The uuids were the same.... ');\n        var loader = new uuidMockup();\n        loader.load(test.id, function(err, props) {\n          t.ok(!err, 'There was an error while loading');\n          t.same(props.name, test.p('name'), 'The loaded properties were not correct.');\n          uuidMockup.find({\n            name: test.p('name')\n          }, function(err, ids) {\n            t.ok(!err, 'There was an error while finding.');\n            t.same([test.id], ids, 'Did not find the correct ids');\n            t.done();\n          });\n        });\n      });\n    });\n  },\n  \n  \"normal string IDs\": {\n    setUp: function (next) {\n      var self = this;\n      createUsers([{ \n      }, {\n        name: 'blablub'\n      }], 'UserFindNoIncrementMockup', function (users, ids) {\n        self.users = users;\n        self.userIds = ids;\n        next();\n      });\n    },\n    tearDown: function (next) {\n      h.cleanUp(redis, args.prefix, next);\n    },\n    \n    find: function (t) {\n      t.expect(2);\n      var self = this;\n      \n      UserFindNoIncrementMockup.find({\n        name: 'blablub'\n      }, function (err, ids) {\n        t.same(ids.length, 1, 'Did not find the correct number of ids for non-incremental id model.');\n        t.same(ids[0], self.userIds[1], 'Did not find the correct id for non-incremental id model.');\n        t.done();\n      });\n    },\n  \n    \"load via constructor\": function (t) {\n      t.expect(2);\n      var self = this;\n      \n      var test = new UserFindNoIncrementMockup(this.userIds[0], function (err) {\n        t.ok(!err, 'There was an error while loading a model via constructor.');\n        t.same(test.allProperties(), self.users[0].allProperties(), 'A loaded user did not match what should\\'ve been saved.');\n        t.done();\n      });\n    }\n  },\n  \n  \"search unique that doesn't exists\": function (t) {\n    t.expect(2);\n    var test = nohm.factory('UserFindMockup');\n    test.find({\n      email: 'this_user_email_should_absolutely_not_exist. it\\'s not even a valid email...'\n    }, function (err, ids) {\n      t.ok(!err, 'There was an error while searching an inexistant unique value.');\n      t.same([], ids, 'The return of a search that didn\\'t find anything was wrong.');\n      t.done();\n    })\n  },\n  \n  \"load via constructor\": function (t) {\n    t.expect(3);\n    var test = nohm.factory('UserFindMockup');\n    test.save(function (err) {\n      t.ok(!err, 'There was an error while saving.');\n      \n      var test2 = new UserFindMockup(test.id, function (err) {\n        t.ok(!err, 'There was an error while loading a model via constructor.');\n        t.same(test2.allProperties(), test.allProperties(), 'The return of a search that didn\\'t find anything was wrong.');\n        t.done();\n      });\n    })\n  },\n  \n  sort: {\n    \n    \"all by name\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('name');\n        b = b.p('name');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'name'\n      }, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"all by name DESC\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('name');\n        b = b.p('name');\n        return a < b ? 1 : (a > b ? -1 : 0);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'name',\n        direction: 'DESC'\n      }, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"all by name LIMIT 2, 3\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('name');\n        b = b.p('name');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).slice(2, 5)\n      .map(function (user) {\n        return ''+user.id;\n      });      \n      \n      UserFindMockup.sort({\n        field: 'name',\n        limit: [2,3]\n      }, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"all by number\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('number');\n        b = b.p('number');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'number'\n      }, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"all by number DESC\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        var id_sort = a.id < b.id ? 1 : -1;\n        a = a.p('number');\n        b = b.p('number');\n        return a < b ? 1 : (a > b ? -1 : id_sort);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'number',\n        direction: 'DESC'\n      }, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"all by number LIMIT 3, 3\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('number');\n        b = b.p('number');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).slice(3, 6)\n      .map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'number',\n        limit: [3,3]\n      }, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \"provided by name\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('name');\n        b = b.p('name');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'name'\n      }, this.userIds, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"provided by name DESC\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('name');\n        b = b.p('name');\n        return a < b ? 1 : (a > b ? -1 : 0);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'name',\n        direction: 'DESC'\n      }, this.userIds, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"provided by name LIMIT 2, 3\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('name');\n        b = b.p('name');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).slice(2, 5)\n      .map(function (user) {\n        return ''+user.id;\n      });      \n      \n      UserFindMockup.sort({\n        field: 'name',\n        limit: [2,3]\n      }, this.userIds, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"provided by number\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('number');\n        b = b.p('number');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'number'\n      }, this.userIds, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"provided by number DESC\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        var id_sort = a.id < b.id ? 1 : -1;\n        a = a.p('number');\n        b = b.p('number');\n        return a < b ? 1 : (a > b ? -1 : id_sort);\n      }).map(function (user) {\n        return ''+user.id;\n      });\n      \n      UserFindMockup.sort({\n        field: 'number',\n        direction: 'DESC'\n      }, this.userIds, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    },\n    \n    \"provided by number LIMIT 3, 3\": function (t) {\n      t.expect(2);\n      \n      var sorted_ids = this.users.sort(function (a, b) {\n        a = a.p('number');\n        b = b.p('number');\n        return a > b ? 1 : (a < b ? -1 : 0);\n      }).slice(3, 6)\n      .map(function (user) {\n        return ''+user.id;\n      });      \n      \n      UserFindMockup.sort({\n        field: 'number',\n        limit: [3,3]\n      }, this.userIds, function (err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(sorted_ids, ids, 'Sorting went wrong.');\n        t.done();\n      });\n    }\n  },\n\n  \"load hash with extra properties\": function(t) {\n    var user = new UserFindMockup(),\n        findUser = new UserFindMockup();\n    t.expect(7);\n\n    user.p({\n      name: 'hurgelwurz',\n      email: 'hurgelwurz@hurgel.de',\n      json: {\n        test: 1\n      }\n    });\n\n    user.save(function(err) {\n      if (err) {\n        console.dir(err);\n        t.done();\n      }\n      redis.hset(nohm.prefix.hash+findUser.modelName+':'+user.id, 'not_a_real_property', 'something... :-)', function (err) {\n        t.ok(!err, 'Unexpected redis error in custom query');\n        console.log('There should be an error in the next line');\n        findUser.load(user.id, function(err) {\n          t.ok(!err, 'Unexpected load error');\n          t.equals(user.p('name'), findUser.p('name'), 'The loaded version of the name was not the same as a set one.');\n          t.equals(user.p('email'), findUser.p('email'), 'The loaded version of the email was not the same as a set one.');\n          t.equals(findUser.p('json').test, 1, 'The loaded version of the json was not the same as the set one.');\n          t.equals(user.id, findUser.id, 'The loaded version of the email was not the same as a set one.');\n          t.equals(user.p('bool'), false, 'The loaded version of the boolean was not the same as a set one.');\n          t.done();\n        });\n      });\n    });\n  }\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":28145}]],"length":28145}
{"contributors":[],"silentsave":false,"ts":1354639902921,"patch":[[{"diffs":[[0,"ockup();"],[1,"\n    var user2 = new UserFindMockup();"],[0,"\n\n    us"]],"start1":4755,"start2":4755,"length1":16,"length2":54},{"diffs":[[0,"e',\n    });\n"],[-1,"\n    user.save("],[1,"    user2.p({\n      name: 'hurgelwurz',\n      email: 'hurgelwurz2@hurgel.de',\n    });\n\n    async.parallel([\n      function (done) {\n        user.save(done);\n      },\n      function (done) {\n        user2.save(done);\n      }\n    ], "],[0,"function(err"]],"start1":4875,"start2":4875,"length1":39,"length2":255}]],"length":28399,"saved":false}
{"ts":1354639907899,"patch":[[{"diffs":[[0,"length, "],[-1,"1"],[1,"2"],[0,", 'The l"]],"start1":5382,"start2":5382,"length1":17,"length2":17}]],"length":28399,"saved":false}
{"ts":1354639921579,"patch":[[{"diffs":[[0,"ers "],[-1,"equals 1"],[1,"was not 2."],[0,"');\n"]],"start1":5417,"start2":5417,"length1":16,"length2":18}]],"length":28401,"saved":false}
{"ts":1354639961769,"patch":[[{"diffs":[[0,"      }\n"],[1,"        console.log(users[1].p('email'));"],[0,"\n       "]],"start1":5350,"start2":5350,"length1":16,"length2":57}]],"length":28442,"saved":false}
{"contributors":[],"silentsave":false,"ts":1354640334591,"patch":[[{"diffs":[[0,"ser2.save(done);"],[1,"aa"],[0,"\n      }\n    ], "]],"start1":5086,"start2":5086,"length1":32,"length2":34}]],"length":28444,"saved":false}
{"ts":1354640336358,"patch":[[{"diffs":[[0,"ne);"],[-1,"aa"],[0,"\n   "]],"start1":5098,"start2":5098,"length1":10,"length2":8}]],"length":28442,"saved":false}
{"contributors":[],"silentsave":false,"ts":1357223648092,"patch":[[{"diffs":[[0,"ne();\n      });\n"],[1,"    },\n\n    \"provided empty list\": function (t) {\n      t.expect(2);\n\n      UserFindMockup.sort({\n        field: 'number',\n        limit: [0, 10]\n      }, [], function(err, ids) {\n        t.same(null, err, 'Sorting caused an error: '+err);\n        t.same(0, ids.length, 'Sorting went wrong when ids.length is 0.');\n        t.done();\n      });\n"],[0,"    }\n  },\n\n  \"l"]],"start1":27061,"start2":27061,"length1":32,"length2":375},{"diffs":[[0,"\n    });\n  }"],[1,",\n  \n  \"descending order by hiher min than max\": function(t) {\n    t.expect(2);\n\n    UserFindMockup.find({\n      number: {\n        min: 4,\n        max: '-inf',\n        limit: 1\n      }\n    }, function(err, ids) {\n      t.ok(!err, 'Unexpected redis error in custom query');\n      t.same([4, 3, 2, 1], ids, 'Searching when min>max condition(ZREVRANGEBYSCORE) is invalid.');\n    });\n  },\n  \n  \n  "],[0,"\n};\n"]],"start1":28769,"start2":28769,"length1":16,"length2":409}]],"length":29178,"saved":false}
{"ts":1357223683717,"patch":[[{"diffs":[[0,"ion(err, ids) {\n"],[1,"      console.log('ids', err, ids);\n"],[0,"      t.ok(!err,"]],"start1":28978,"start2":28978,"length1":32,"length2":68}]],"length":29214,"saved":false}
{"ts":1357223688375,"patch":[[{"diffs":[[0,"', err, ids)"],[1,"[]"],[0,";\n      t.ok"]],"start1":29016,"start2":29016,"length1":24,"length2":26}]],"length":29216,"saved":false}
{"ts":1357223700601,"patch":[[{"diffs":[[0,"rr, ids)"],[1,";()"],[0,"[];\n    "]],"start1":29020,"start2":29020,"length1":16,"length2":19}]],"length":29219,"saved":false}
{"ts":1357223709312,"patch":[[{"diffs":[[0,"ds);"],[-1,"()"],[0,"[]"],[1,"()"],[0,";\n  "]],"start1":29025,"start2":29025,"length1":12,"length2":12}]],"length":29219,"saved":false}
{"ts":1357223722727,"patch":[[{"diffs":[[0,") {\n"],[-1,"      console.log('ids', err, ids);[]();\n"],[0,"    "]],"start1":28990,"start2":28990,"length1":49,"length2":8},{"diffs":[[0,"invalid.');\n"],[1,"      t.done();\n"],[0,"    });\n  },"]],"start1":29141,"start2":29141,"length1":24,"length2":40}]],"length":29194,"saved":false}
{"ts":1357223728983,"patch":[[{"diffs":[[0,"ion(err, ids) {\n"],[1,"      console.log('ids', err, ids);[]();\n"],[0,"      t.ok(!err,"]],"start1":28978,"start2":28978,"length1":32,"length2":73}]],"length":29235,"saved":false}
{"ts":1357223942839,"patch":[[{"diffs":[[0," 4,\n"],[-1,"        max: '-inf',\n"],[0,"    "]],"start1":28916,"start2":28916,"length1":29,"length2":8}]],"length":29214,"saved":false}
{"ts":1357224489011,"patch":[[{"diffs":[[0,"der "],[-1,"by"],[1,"through"],[0," hi"],[1,"g"],[0,"her "]],"start1":28802,"start2":28802,"length1":13,"length2":19},{"diffs":[[0,"n: 4"],[-1,",\n        limit: 1"],[0,"\n   "]],"start1":28920,"start2":28920,"length1":26,"length2":8}]],"length":29202,"saved":false}
{"ts":1357224497148,"patch":[[{"diffs":[[0,"  min: 4"],[1,",\n        max: '-inf'"],[0,"\n      }"]],"start1":28916,"start2":28916,"length1":16,"length2":37}]],"length":29223,"saved":false}
{"ts":1357224508614,"patch":[[{"diffs":[[0,"   min: "],[-1,"4"],[1,"3"],[0,",\n      "]],"start1":28915,"start2":28915,"length1":17,"length2":17}]],"length":29223,"saved":false}
{"ts":1357224941444,"patch":[[{"diffs":[[0,"me(["],[-1,"4, 3, 2, 1"],[1,"1, 7, 6, 5, 4], ids, 'Searching when min>max condition(ZREVRANGEBYSCORE) is invalid.');\n      t.done();\n    });\n  },\n  \n  \"descending order through higher min than max with limit 2\": function(t) { // should produce lexical ordering for the second which should be 7 (due)\n    t.expect(2);\n\n    UserFindMockup.find({\n      number: {\n        min: 3,\n        max: '-inf'\n        limit: 2\n      }\n    }, function(err, ids) {\n      console.log('ids', err, ids);[]();\n      t.ok(!err, 'Unexpected redis error in custom query');\n      t.same([1, 7"],[0,"], i"]],"start1":29093,"start2":29093,"length1":18,"length2":547},{"diffs":[[0," });\n  }"],[-1,",\n  "],[0,"\n  \n  \n}"]],"start1":29730,"start2":29730,"length1":20,"length2":16}]],"length":29748,"saved":false}
{"ts":1357224955636,"patch":[[{"diffs":[[0," max: '-inf'"],[1,","],[0,"\n        lim"]],"start1":29451,"start2":29451,"length1":24,"length2":25}]],"length":29749,"saved":false}
{"ts":1357224957618,"patch":[[{"diffs":[[0,") {\n"],[-1,"      console.log('ids', err, ids);[]();\n"],[0,"    "]],"start1":28978,"start2":28978,"length1":49,"length2":8}]],"length":29708,"saved":false}
{"ts":1357224967163,"patch":[[{"diffs":[[0,") {\n"],[-1,"      console.log('ids', err, ids);[]();\n"],[0,"    "]],"start1":29473,"start2":29473,"length1":49,"length2":8}]],"length":29667,"saved":false}
{"ts":1357224976527,"patch":[[{"diffs":[[0,", 6, 5, "],[-1,"4"],[1,"10"],[0,"], ids, "]],"start1":29060,"start2":29060,"length1":17,"length2":18}]],"length":29668,"saved":false}
{"ts":1357224982909,"patch":[[{"diffs":[[0,", 6, 5, "],[-1,"10"],[1,"4"],[0,"], ids, "]],"start1":29060,"start2":29060,"length1":18,"length2":17}]],"length":29667,"saved":false}
{"ts":1357225058572,"patch":[[{"diffs":[[0,"    });\n"],[1,"  },\n  \n  \"endpoints exclude left\": function(t) {\n    t.expect(2);\n\n    UserFindMockup.find({\n      number: {\n        min: 3,\n        max: '-inf',\n        endpoints: '(]'\n      }\n    }, function(err, ids) {\n      t.ok(!err, 'Unexpected redis error in custom query');\n      t.same([7, 6, 5, 4], ids, 'Searching when min>max condition(ZREVRANGEBYSCORE) is invalid.');\n      t.done();\n    });\n"],[0,"  }\n  \n "]],"start1":29646,"start2":29646,"length1":16,"length2":406}]],"length":30057,"saved":false}
{"ts":1357225082881,"patch":[[{"diffs":[[0,"REVRANGEBYSCORE)"],[1," with limit"],[0," is invalid.');\n"]],"start1":29598,"start2":29598,"length1":32,"length2":43},{"diffs":[[0,"s, '"],[-1,"Searching when min>max condition(ZREVRANGEBYSCORE) is invali"],[1,"Defining an endpoint faile"],[0,"d.')"]],"start1":29961,"start2":29961,"length1":68,"length2":34}]],"length":30034,"saved":false}
{"ts":1357225269932,"patch":[[{"diffs":[[0,"ion(err, ids) {\n"],[1,"      console.log(ids); ()[];\n"],[0,"      t.ok(!err,"]],"start1":29856,"start2":29856,"length1":32,"length2":62}]],"length":30064,"saved":false}
{"ts":1357225273526,"patch":[[{"diffs":[[0,"s); "],[-1,"()"],[0,"[]"],[1,"()"],[0,";\n  "]],"start1":29892,"start2":29892,"length1":12,"length2":12}]],"length":30064,"saved":false}
{"ts":1357225550085,"patch":[[{"diffs":[[0,"endpoint"],[-1,"s"],[0,": '(]'\n "]],"start1":29820,"start2":29820,"length1":17,"length2":16}]],"length":30063,"saved":false}
{"ts":1357225579812,"patch":[[{"diffs":[[0,"endpoint"],[1,"s"],[0,": '(]'\n "]],"start1":29820,"start2":29820,"length1":16,"length2":17}]],"length":30064,"saved":false}
{"ts":1357225634899,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(ids); []();"],[1,"t.ok(!err, 'Unexpected redis error in custom query');\n      t.same([7, 6, 5, 4], ids, 'Defining an endpoint failed.');\n      t.done();\n    });\n  },\n  \n  \"endpoints exclude right\": function(t) {\n    t.expect(2);\n\n    UserFindMockup.find({\n      number: {\n        min: 3,\n        max: '-inf',\n        endpoints: '[)'\n      }\n    }, function(err, ids) {"],[0,"\n   "]],"start1":29874,"start2":29874,"length1":31,"length2":358},{"diffs":[[0,"    t.same(["],[-1,"7, 6, 5, 4"],[1,"1"],[0,"], ids, 'Def"]],"start1":30291,"start2":30291,"length1":34,"length2":25}]],"length":30382,"saved":false}
{"ts":1357225648213,"patch":[[{"diffs":[[0,",\n        max: '"],[-1,"-inf"],[1,"1"],[0,"',\n        endpo"]],"start1":30146,"start2":30146,"length1":36,"length2":33}]],"length":30379,"saved":false}
{"ts":1357225651665,"patch":[[{"diffs":[[0,"3,\n        max: "],[-1,"'-inf'"],[1,"1"],[0,",\n        endpoi"]],"start1":29788,"start2":29788,"length1":38,"length2":33}]],"length":30374,"saved":false}
{"ts":1357225676678,"patch":[[{"diffs":[[0,"    });\n"],[1,"  },\n  \n  \"endpoints exclude both\": function(t) {\n    t.expect(2);\n\n    UserFindMockup.find({\n      number: {\n        min: 3,\n        max: '1',\n        endpoints: '[)'\n      }\n    }, function(err, ids) {\n      t.ok(!err, 'Unexpected redis error in custom query');\n      t.same([], ids, 'Defining an endpoint failed.');\n      t.done();\n    });\n"],[0,"  }\n  \n "]],"start1":30353,"start2":30353,"length1":16,"length2":359}]],"length":30717,"saved":false}
{"ts":1357225683594,"patch":[[{"diffs":[[0,"3,\n        max: "],[-1,"'1'"],[1,"1"],[0,",\n        endpoi"]],"start1":30140,"start2":30140,"length1":35,"length2":33},{"diffs":[[0,"ax: "],[-1,"'1'"],[1,"1"],[0,",\n  "]],"start1":30494,"start2":30494,"length1":11,"length2":9}]],"length":30713,"saved":false}
{"ts":1357225690880,"patch":[[{"diffs":[[0,"    endpoints: '"],[-1,"["],[1,"("],[0,")'\n      }\n    }"]],"start1":30505,"start2":30505,"length1":33,"length2":33}]],"length":30713,"saved":false}
{"ts":1357225710645,"patch":[[{"diffs":[[0," {\n        min: "],[-1,"3"],[1,"4"],[0,",\n        max: 1"]],"start1":29772,"start2":29772,"length1":33,"length2":33},{"diffs":[[0," {\n        min: "],[-1,"3"],[1,"4"],[0,",\n        max: 1"]],"start1":30124,"start2":30124,"length1":33,"length2":33},{"diffs":[[0," {\n        min: "],[-1,"3"],[1,"4"],[0,",\n        max: 1"]],"start1":30466,"start2":30466,"length1":33,"length2":33}]],"length":30713,"saved":false}
{"ts":1357225729506,"patch":[[{"diffs":[[0," {\n        min: "],[-1,"4"],[1,"3"],[0,",\n        max: 1"]],"start1":29772,"start2":29772,"length1":33,"length2":33},{"diffs":[[0," {\n        min: "],[-1,"4"],[1,"3"],[0,",\n        max: 1"]],"start1":30124,"start2":30124,"length1":33,"length2":33}]],"length":30713,"saved":false}
{"ts":1357225739320,"patch":[[{"diffs":[[0,"t.same(["],[-1,"1"],[0,"], ids, "]],"start1":30285,"start2":30285,"length1":17,"length2":16}]],"length":30712,"saved":false}
{"ts":1357225873291,"patch":[[{"diffs":[[0,"});\n\n   "],[1," var saved ="],[0," shortFo"]],"start1":15342,"start2":15342,"length1":16,"length2":28},{"diffs":[[0,"d = "],[-1,"this.id"],[1,"saved.id;\n      t.same(saved, this, '`this` is not equal to the return value of save().')"],[0,";\n  "]],"start1":15411,"start2":15411,"length1":15,"length2":97},{"diffs":[[0,"   t.ok("],[-1,"this"],[1,"saved"],[0," instanc"]],"start1":15562,"start2":15562,"length1":20,"length2":21},{"diffs":[[0,"ly');\n      "],[-1,"this"],[1,"saved"],[0,".p('name', '"]],"start1":15705,"start2":15705,"length1":28,"length2":29},{"diffs":[[0,";\n      "],[-1,"this"],[1,"saved"],[0,".save(fu"]],"start1":15745,"start2":15745,"length1":20,"length2":21},{"diffs":[[0,"        "],[-1,"this"],[1,"saved"],[0,".p('name"]],"start1":15777,"start2":15777,"length1":20,"length2":21},{"diffs":[[0," t.same("],[-1,"this"],[1,"saved"],[0,".p('name"]],"start1":16117,"start2":16117,"length1":20,"length2":21},{"diffs":[[0,"t.done();\n    })"],[1,";"],[0,"\n  },\n  \n  \"load"]],"start1":19740,"start2":19740,"length1":32,"length2":33},{"diffs":[[0,";\n    })"],[1,";"],[0,"\n  },\n  "]],"start1":20258,"start2":20258,"length1":16,"length2":17}]],"length":30813,"saved":false}
{"ts":1357225932018,"patch":[[{"diffs":[[0,") {\n"],[-1,"      var id = saved.id;\n"],[0,"    "]],"start1":15396,"start2":15396,"length1":33,"length2":8},{"diffs":[[0," save().');\n"],[1,"      var id = saved.id;\n"],[0,"      t.ok(!"]],"start1":15469,"start2":15469,"length1":24,"length2":49}]],"length":30813,"saved":false}
{"ts":1357226056642,"patch":[[{"diffs":[[0,"expect(1"],[-1,"1"],[1,"2"],[0,");\n    v"]],"start1":15035,"start2":15035,"length1":17,"length2":17},{"diffs":[[0," t.same("],[-1,"saved"],[1,"this"],[0,".p('name"]],"start1":16117,"start2":16117,"length1":21,"length2":20}]],"length":30812,"saved":false}
{"ts":1357226082723,"patch":[[{"diffs":[[0,";\n      t.same(["],[1,"1"],[0,"], ids, 'Definin"]],"start1":30377,"start2":30377,"length1":32,"length2":33}]],"length":30813,"saved":false}
{"ts":1357226261543,"patch":[[{"diffs":[[0,"ion(err, ids) {\n"],[1,"      []();\n"],[0,"      t.ok(!err,"]],"start1":30645,"start2":30645,"length1":32,"length2":44}]],"length":30825,"saved":false}
{"ts":1357226297063,"patch":[[{"diffs":[[0,"   min: "],[-1,"4"],[1,"3"],[0,",\n      "]],"start1":30574,"start2":30574,"length1":17,"length2":17}]],"length":30825,"saved":false}
{"ts":1357226306117,"patch":[[{"diffs":[[0,") {\n"],[-1,"      []();\n"],[0,"    "]],"start1":30657,"start2":30657,"length1":20,"length2":8}]],"length":30813,"saved":false}
{"ts":1357226640405,"patch":[[{"diffs":[[0,"tion = function("],[1,"err"],[0,") {\n"],[1,"          if (err) {\n            t.ok(false, 'Error while creating findUsers');\n          }\n  "],[0,"        usersLoo"]],"start1":12860,"start2":12860,"length1":36,"length2":133},{"diffs":[[0,"oped++;\n"],[1,"  "],[0,"        "]],"start1":12992,"start2":12992,"length1":16,"length2":18},{"diffs":[[0,"55) {\n          "],[1,"  "],[0,"findUser.find({\n"]],"start1":13030,"start2":13030,"length1":32,"length2":34},{"diffs":[[0,"findUser.find({\n"],[1,"  "],[0,"            numb"]],"start1":13048,"start2":13048,"length1":32,"length2":34},{"diffs":[[0,"            "],[1,"  "],[0,"min: 1,\n    "]],"start1":13090,"start2":13090,"length1":24,"length2":26},{"diffs":[[0,"            "],[1," "],[1," "],[0,"limit: 0\n   "]],"start1":13114,"start2":13114,"length1":24,"length2":26},{"diffs":[[0,": 0\n            "],[1,"  "],[0,"}\n          }, f"]],"start1":13133,"start2":13133,"length1":32,"length2":34},{"diffs":[[0,"    }\n          "],[1," "],[1," "],[0,"}, function(err,"]],"start1":13147,"start2":13147,"length1":32,"length2":34},{"diffs":[[0,"            "],[1,"  "],[0,"errLogger(er"]],"start1":13189,"start2":13189,"length1":24,"length2":26},{"diffs":[[0,"            "],[1," "],[1," "],[0,"t.ok(ids.len"]],"start1":13219,"start2":13219,"length1":24,"length2":26},{"diffs":[[0,"');\n            "],[1,"  "],[0,"t.done();\n      "]],"start1":13308,"start2":13308,"length1":32,"length2":34},{"diffs":[[0,"ne();\n          "],[1,"  "],[0,"});\n"],[1,"  "],[0,"        }\n      "]],"start1":13330,"start2":13330,"length1":36,"length2":40}]],"length":30934,"saved":false}
{"ts":1357226726833,"patch":[[{"diffs":[[0,"    });\n"],[1,"  },\n\n  \"find numeric with offset and limit\": function(t) {\n    var findUser = new UserFindMockup();\n    t.expect(1);\n\n    findUser.find({\n      number: {\n        min: 2\n      },\n      number2: {\n        max: 100,\n        limit: 2\n        offset: 5\n      }\n    }, function(err, ids) {\n      errLogger(err);\n      t.same(ids.sort(), [users[0].id, users[1].id].sort(), 'The found id did not match the id of the saved object.');\n      t.done();\n    });\n"],[0,"  }\n  \n "]],"start1":30913,"start2":30913,"length1":16,"length2":466}]],"length":31384,"saved":false}
{"ts":1357226744893,"patch":[[{"diffs":[[0,"in: "],[-1,"2\n      },\n      number2: {\n        max: 100"],[1,"1"],[0,",\n  "]],"start1":31085,"start2":31085,"length1":52,"length2":9}]],"length":31341,"saved":false}
{"ts":1357226752909,"patch":[[{"diffs":[[0,"(ids"],[-1,".sort(), [users[0].id, users[1].id].sort()"],[1,", []"],[0,", 'T"]],"start1":31197,"start2":31197,"length1":50,"length2":12}]],"length":31303,"saved":false}
{"ts":1357226799030,"patch":[[{"diffs":[[0,"sers"],[-1,", inserted_ids"],[0,") {\n"]],"start1":10803,"start2":10803,"length1":22,"length2":8}]],"length":31289,"saved":false}
{"ts":1357226809426,"patch":[[{"diffs":[[0,"    limit: 2"],[1,","],[0,"\n        off"]],"start1":31082,"start2":31082,"length1":24,"length2":25}]],"length":31290,"saved":false}
{"ts":1357226818764,"patch":[[{"diffs":[[0,"t: 2"],[-1,",\n        offset: 5"],[0,"\n   "]],"start1":31090,"start2":31090,"length1":27,"length2":8}]],"length":31271,"saved":false}
{"ts":1357226828014,"patch":[[{"diffs":[[0,"  min: 1"],[-1,",\n        limit: 2"],[0,"\n      }"]],"start1":31068,"start2":31068,"length1":34,"length2":16}]],"length":31253,"saved":false}
{"ts":1357226850446,"patch":[[{"diffs":[[0,"   });\n  },\n"],[1,"  // [ '4', '5', '6', '7', '1', '2', '3', '8' ]\n  "],[0,"\n  \"find num"]],"start1":30900,"start2":30900,"length1":24,"length2":74},{"diffs":[[0,"  min: 1"],[1,",\n        limit: 3,\n        offset: 2"],[0,"\n      }"]],"start1":31118,"start2":31118,"length1":16,"length2":53}]],"length":31340,"saved":false}
{"ts":1357226864543,"patch":[[{"diffs":[[0,".same(ids, ["],[1,"6, 7, 1"],[0,"], 'The foun"]],"start1":31229,"start2":31229,"length1":24,"length2":31}]],"length":31347,"saved":false}
{"ts":1357226879030,"patch":[[{"diffs":[[0," },\n"],[-1,"  // [ '4', '5', '6', '7', '1', '2', '3', '8' ]\n"],[0,"  \n "]],"start1":30908,"start2":30908,"length1":56,"length2":8}]],"length":31299,"saved":false}
{"ts":1357226888396,"patch":[[{"diffs":[[0,"d id"],[-1," did not match the id of the saved obj"],[1,"s were incorr"],[0,"ect."]],"start1":31212,"start2":31212,"length1":46,"length2":21}]],"length":31274,"saved":false}
{"ts":1357226964708,"patch":[[{"diffs":[[0,");\n    t.expect("],[-1,"1"],[1,"2"],[0,");\n\n    findUser"]],"start1":31007,"start2":31007,"length1":33,"length2":33},{"diffs":[[0,"ds) {\n      "],[-1,"errLogger(err"],[1,"t.ok(!err, 'Unexpected redis error in custom query'"],[0,");\n      t.s"]],"start1":31146,"start2":31146,"length1":37,"length2":75}]],"length":31312,"saved":false}
{"ts":1357226986444,"patch":[[{"diffs":[[0,"rties\": function"],[1," "],[0,"(t) {\n"],[-1,""],[0,"    var user = n"]],"start1":27668,"start2":27668,"length1":38,"length2":39},{"diffs":[[0,"n max\": function"],[1," "],[0,"(t) {\n    t.expe"]],"start1":29036,"start2":29036,"length1":32,"length2":33},{"diffs":[[0,"2\": function"],[1," "],[0,"(t) { // sho"]],"start1":29444,"start2":29444,"length1":24,"length2":25},{"diffs":[[0," left\": function"],[1," "],[0,"(t) {\n    t.expe"]],"start1":29903,"start2":29903,"length1":32,"length2":33},{"diffs":[[0,"right\": function"],[1," "],[0,"(t) {\n    t.expe"]],"start1":30256,"start2":30256,"length1":32,"length2":33},{"diffs":[[0," both\": function"],[1," "],[0,"(t) {\n    t.expe"]],"start1":30599,"start2":30599,"length1":32,"length2":33},{"diffs":[[0,"  },\n  \n"],[-1,""],[0,"  \"find "]],"start1":30913,"start2":30913,"length1":16,"length2":16},{"diffs":[[0,"limit\": function"],[1," "],[0,"(t) {\n    var fi"]],"start1":30953,"start2":30953,"length1":32,"length2":33}]],"length":31319,"saved":false}
{"ts":1357227018407,"patch":[[{"diffs":[[0,"    });\n"],[1,"  },\n  \n  \"find numeric with offset and limit\": function (t) {\n    var findUser = new UserFindMockup();\n    t.expect(2);\n\n    findUser.find({\n      number: {\n        min: 1,\n        limit: 3,\n        offset: 8\n      }\n    }, function(err, ids) {\n      t.ok(!err, 'Unexpected redis error in custom query');\n      t.same(ids, [6, 7, 1], 'The found ids were incorrect.');\n      t.done();\n    });\n"],[0,"  }\n  \n "]],"start1":31298,"start2":31298,"length1":16,"length2":409}]],"length":31712,"saved":false}
{"ts":1357227027971,"patch":[[{"diffs":[[0,"offset: "],[-1,"8"],[1,"6"],[0,"\n      }"]],"start1":31506,"start2":31506,"length1":17,"length2":17}]],"length":31712,"saved":false}
{"ts":1357227058280,"patch":[[{"diffs":[[0,"with offset and "],[1,"limit were the offset reduces the set below the "],[0,"limit\": function"]],"start1":31330,"start2":31330,"length1":32,"length2":80},{"diffs":[[0,"n: 1"],[-1,",\n        limit: 3,\n        offset: 6"],[0,"\n   "]],"start1":31522,"start2":31522,"length1":45,"length2":8}]],"length":31723,"saved":false}
{"ts":1357227074339,"patch":[[{"diffs":[[0,"  min: 1"],[1,",\n        limit: 3,\n        offset: 6"],[0,"\n      }"]],"start1":31518,"start2":31518,"length1":16,"length2":53},{"diffs":[[0,"   t.same(ids, ["],[-1,"6, 7, 1"],[1,"3, 8"],[0,"], 'The found id"]],"start1":31663,"start2":31663,"length1":39,"length2":36}]],"length":31757,"saved":false}
{"ts":1357227095360,"patch":[[{"diffs":[[0,") {\n"],[-1,"    var findUser = new UserFindMockup();\n"],[0,"    "]],"start1":30972,"start2":30972,"length1":49,"length2":8},{"diffs":[[0,"ct(2);\n\n    "],[-1,"find"],[0,"User"],[1,"FindMockup"],[0,".find({\n    "]],"start1":30986,"start2":30986,"length1":32,"length2":38}]],"length":31722,"saved":false}
{"ts":1357227136638,"patch":[[{"diffs":[[0,"    });\n"],[1,"  },\n  \n  \"find numeric with offset without limit\": function (t) {\n    var findUser = new UserFindMockup();\n    t.expect(2);\n\n    findUser.find({\n      number: {\n        min: 1,\n        offset: 6\n      }\n    }, function(err, ids) {\n      t.ok(!err, 'Unexpected redis error in custom query');\n      t.same(ids, [3, 8], 'The found ids were incorrect.');\n      t.done();\n    });\n"],[0,"  }\n  \n "]],"start1":31701,"start2":31701,"length1":16,"length2":392}]],"length":32098,"saved":false}
{"ts":1357227142769,"patch":[[{"diffs":[[0,"        offset: "],[-1,"6"],[1,"5"],[0,"\n      }\n    }, "]],"start1":31887,"start2":31887,"length1":33,"length2":33}]],"length":32098,"saved":false}
{"ts":1357227167267,"patch":[[{"diffs":[[0,"        min: 1,\n"],[1,"        limit: 0\n"],[0,"        offset: "]],"start1":31871,"start2":31871,"length1":32,"length2":49}]],"length":32115,"saved":false}
{"ts":1357227168502,"patch":[[{"diffs":[[0,"        limit: 0"],[1,", "],[0,"\n        offset:"]],"start1":31887,"start2":31887,"length1":32,"length2":34}]],"length":32117,"saved":false}
{"ts":1357227169332,"patch":[[{"diffs":[[0,"imit: 0,"],[-1," "],[0,"\n       "]],"start1":31896,"start2":31896,"length1":17,"length2":16}]],"length":32116,"saved":false}
{"ts":1357227304838,"patch":[[{"diffs":[[0," 1,\n"],[-1,"        limit: 0,\n"],[0,"    "]],"start1":31883,"start2":31883,"length1":26,"length2":8}]],"length":32098,"saved":false}
{"ts":1357227489232,"patch":[[{"diffs":[[0,"ion(err, ids) {\n"],[1,"      []();\n"],[0,"      t.ok(!err,"]],"start1":31925,"start2":31925,"length1":32,"length2":44}]],"length":32110,"saved":false}
{"ts":1357227828257,"patch":[[{"diffs":[[0,") {\n"],[-1,"      []();\n"],[0,"    "]],"start1":31937,"start2":31937,"length1":20,"length2":8}]],"length":32098,"saved":false}
{"ts":1357227870111,"patch":[[{"diffs":[[0," {\n        min: "],[-1,"1"],[1,"2"],[0,",\n        offset"]],"start1":31868,"start2":31868,"length1":33,"length2":33}]],"length":32098,"saved":false}
{"ts":1357227881889,"patch":[[{"diffs":[[0,"   min: "],[-1,"2"],[1,"1"],[0,",\n      "]],"start1":31876,"start2":31876,"length1":17,"length2":17},{"diffs":[[0,"offset: "],[-1,"5"],[1,"1"],[0,"\n      }"]],"start1":31895,"start2":31895,"length1":17,"length2":17}]],"length":32098,"saved":false}
{"ts":1357227900429,"patch":[[{"diffs":[[0,"offset: "],[-1,"1"],[1,"5"],[0,"\n      }"]],"start1":31895,"start2":31895,"length1":17,"length2":17},{"diffs":[[0,"   t.same(ids, ["],[1,"2, "],[0,"3, 8], 'The foun"]],"start1":32004,"start2":32004,"length1":32,"length2":35}]],"length":32101,"saved":false}
